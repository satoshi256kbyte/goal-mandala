name: Database Migration

on:
  pull_request:
    paths:
      - "packages/backend/prisma/**"
      - "packages/backend/src/**"
      - ".github/workflows/database-migration.yml"
  push:
    branches: [main]
    paths:
      - "packages/backend/prisma/**"
      - "packages/backend/src/**"

jobs:
  migration-test:
    name: Migration Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: goal_mandala_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Setup test environment
        working-directory: packages/backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/goal_mandala_test
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/goal_mandala_test" > .env
          echo "NODE_ENV=test" >> .env

      - name: Run migration tests
        working-directory: packages/backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/goal_mandala_test
        run: |
          # Prismaクライアント生成
          npx prisma generate

          # マイグレーション実行
          npx prisma migrate deploy

          # マイグレーションテスト実行
          pnpm test tests/migration.test.ts

          # パフォーマンステスト実行
          pnpm test tests/migration-performance.test.ts

      - name: Migration status check
        working-directory: packages/backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/goal_mandala_test
        run: |
          # マイグレーション状態確認
          npx prisma migrate status

          # テーブル存在確認
          npx prisma db execute --stdin <<< "
          SELECT table_name 
          FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_type = 'BASE TABLE'
          ORDER BY table_name;
          "

  seed-data-test:
    name: Seed Data Test
    runs-on: ubuntu-latest
    needs: migration-test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: goal_mandala_seed_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Setup test environment
        working-directory: packages/backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/goal_mandala_seed_test
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/goal_mandala_seed_test" > .env
          echo "NODE_ENV=test" >> .env

      - name: Run seed data tests
        working-directory: packages/backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/goal_mandala_seed_test
        run: |
          # Prismaクライアント生成とマイグレーション
          npx prisma generate
          npx prisma migrate deploy

          # シードデータテスト
          pnpm run seed:test

          # データ検証
          npx prisma db execute --stdin <<< "
          SELECT 
            'users' as table_name, COUNT(*) as count FROM \"User\"
          UNION ALL
          SELECT 
            'goals' as table_name, COUNT(*) as count FROM \"Goal\"
          UNION ALL
          SELECT 
            'sub_goals' as table_name, COUNT(*) as count FROM \"SubGoal\"
          UNION ALL
          SELECT 
            'actions' as table_name, COUNT(*) as count FROM \"Action\";
          "

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [migration-test, seed-data-test]
    if: always()

    steps:
      - name: Notify Success
        if: needs.migration-test.result == 'success' && needs.seed-data-test.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ Database migration tests passed successfully!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Failure
        if: needs.migration-test.result == 'failure' || needs.seed-data-test.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ Database migration tests failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
