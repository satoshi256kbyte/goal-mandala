name: Database Migration

on:
  pull_request:
    paths:
      - "packages/backend/prisma/**"
      - "packages/backend/scripts/migrate-*.sh"
      - ".github/workflows/database-migration.yml"
  push:
    branches:
      - main
    paths:
      - "packages/backend/prisma/**"
      - "packages/backend/scripts/migrate-*.sh"

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "8"

jobs:
  migration-test:
    name: Migration Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: goal_mandala_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/goal_mandala_test" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run migration tests
        working-directory: packages/backend
        run: |
          # スキーマ検証
          pnpm run db:validate

          # マイグレーション実行
          pnpm prisma migrate dev --name ci_test

          # Prismaクライアント生成
          pnpm prisma generate

          # マイグレーションテスト実行
          pnpm test tests/migration.test.ts

      - name: Run migration performance tests
        working-directory: packages/backend
        run: |
          pnpm test tests/migration-performance.test.ts

      - name: Check migration status
        working-directory: packages/backend
        run: |
          chmod +x scripts/migrate-status.sh
          ./scripts/migrate-status.sh all

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#goal-mandala-dev"
          text: "🚨 マイグレーションテストが失敗しました"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  migration-deploy:
    name: Deploy Migration
    runs-on: ubuntu-latest
    needs: migration-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get database URL from AWS Secrets Manager
        id: get-db-url
        run: |
          DB_URL=$(aws secretsmanager get-secret-value \
            --secret-id goal-mandala/database/url \
            --query SecretString --output text)
          echo "::add-mask::$DB_URL"
          echo "DATABASE_URL=$DB_URL" >> $GITHUB_ENV

      - name: Setup production environment variables
        run: |
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      - name: Pre-migration backup verification
        working-directory: packages/backend
        run: |
          echo "🔍 本番マイグレーション前チェック"

          # データベース接続確認
          pnpm prisma db execute --stdin <<< "SELECT 1;"

          # 現在のマイグレーション状態確認
          pnpm prisma migrate status

          # スキーマ検証
          pnpm prisma validate

      - name: Run production migration (dry-run)
        working-directory: packages/backend
        run: |
          chmod +x scripts/migrate-prod.sh
          ./scripts/migrate-prod.sh --dry-run

      - name: Run production migration
        working-directory: packages/backend
        run: |
          ./scripts/migrate-prod.sh
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Post-migration validation
        working-directory: packages/backend
        run: |
          echo "✅ 本番マイグレーション後検証"

          # マイグレーション状態確認
          pnpm prisma migrate status

          # 基本的な接続テスト
          pnpm prisma db execute --stdin <<< "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';"

          # Prismaクライアント生成
          pnpm prisma generate

      - name: Notify Slack on success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#goal-mandala-prod"
          text: "✅ 本番マイグレーションが正常に完了しました"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#goal-mandala-prod"
          text: "🚨 本番マイグレーションが失敗しました。緊急対応が必要です。"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  migration-rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get database URL from AWS Secrets Manager
        run: |
          DB_URL=$(aws secretsmanager get-secret-value \
            --secret-id goal-mandala/database/url \
            --query SecretString --output text)
          echo "::add-mask::$DB_URL"
          echo "DATABASE_URL=$DB_URL" >> $GITHUB_ENV

      - name: Setup production environment variables
        run: |
          echo "NODE_ENV=production" >> $GITHUB_ENV

      - name: Emergency database rollback
        working-directory: packages/backend
        run: |
          chmod +x scripts/migrate-rollback.sh
          echo "⚠️ 緊急ロールバック実行"
          ./scripts/migrate-rollback.sh reset

      - name: Notify Slack on rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#goal-mandala-prod",
              "text": "🔄 緊急データベースロールバックが実行されました",
              "color": "warning"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
